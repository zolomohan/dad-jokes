{"version":3,"sources":["Joke.js","JokeList.js","App.js","serviceWorker.js","index.js"],"names":["Joke","getColor","_this","props","votes","getEmoji","handleUpVote","vote","id","handleDownVote","react_default","a","createElement","className","onClick","this","style","borderColor","text","Component","JokeList","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getJokes","asyncToGenerator","regenerator_default","mark","_callee","jokes","jokeResponse","wrap","_context","prev","next","setState","loading","length","defaultNoOfJokes","axios","get","headers","Accept","sent","seenJokes","has","data","joke","push","uuid","currentState","concat","toConsumableArray","window","localStorage","setItem","JSON","stringify","state","t0","alert","stop","handleVote","delta","map","objectSpread","parse","getItem","Set","_this2","src","alt","sort","b","Joke_Joke","key","defaultProps","App","JokeList_JokeList","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uXAGqBA,0NAEpBC,SAAW,WACR,OAAIC,EAAKC,MAAMC,OAAS,GACf,UACEF,EAAKC,MAAMC,OAAS,GACtB,UACEF,EAAKC,MAAMC,OAAS,EACtB,UACEF,EAAKC,MAAMC,OAAS,EACtB,UACEF,EAAKC,MAAMC,OAAS,EACtB,UACEF,EAAKC,MAAMC,OAAS,EACtB,UAEA,aAIXC,SAAW,WACT,OAAIH,EAAKC,MAAMC,OAAS,GACf,sCACEF,EAAKC,MAAMC,OAAS,GACtB,iBACEF,EAAKC,MAAMC,OAAS,EACtB,eACEF,EAAKC,MAAMC,OAAS,EACtB,8BACEF,EAAKC,MAAMC,OAAS,EACtB,qBACEF,EAAKC,MAAMC,OAAS,EACtB,iBAEA,iBAIZE,aAAe,WACdJ,EAAKC,MAAMI,KAAKL,EAAKC,MAAMK,GAAI,MAGhCC,eAAiB,WAChBP,EAAKC,MAAMI,KAAKL,EAAKC,MAAMK,IAAK,4EAI9B,OACEE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAClBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAkBC,QAASC,KAAKT,eAC7CI,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAaG,MAAO,CAACC,YAAaF,KAAKd,aAAcc,KAAKZ,MAAMC,OAChFM,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAAoBC,QAASC,KAAKN,kBAEhDC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaE,KAAKZ,MAAMe,MACvCR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACfH,EAAAC,EAAAC,cAAA,KAAGC,UAAWE,KAAKV,sBAxDWc,cCGbC,cAMnB,SAAAA,EAAYjB,GAAM,IAAAD,EAAA,OAAAmB,OAAAC,EAAA,EAAAD,CAAAN,KAAAK,IAChBlB,EAAAmB,OAAAE,EAAA,EAAAF,CAAAN,KAAAM,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAV,KAAMZ,KAQRuB,SATkBL,OAAAM,EAAA,EAAAN,CAAAO,EAAAjB,EAAAkB,KASP,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,EAAAjB,EAAAsB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACTlC,EAAKmC,SAAS,CAACC,SAAS,IADfJ,EAAAC,KAAA,EAGHJ,EAAQ,GAHL,YAIAA,EAAMQ,OAASrC,EAAKC,MAAMqC,kBAJ1B,CAAAN,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,EAKoBK,IAAMC,IAAI,8BAA+B,CAACC,QAAS,CAACC,OAAQ,sBALhF,OAKDZ,EALCE,EAAAW,KAMD3C,EAAK4C,UAAUC,IAAIf,EAAagB,KAAKC,OACvClB,EAAMmB,KAAK,CAAChC,KAAMc,EAAagB,KAAKC,KAAM7C,MAAO,EAAGI,GAAI2C,QAPrDjB,EAAAE,KAAA,gBASPlC,EAAKmC,SAAS,SAAAe,GAAY,MAAK,CAC7BrB,MAAK,GAAAsB,OAAAhC,OAAAiC,EAAA,EAAAjC,CACA+B,EAAarB,OACbA,GAELO,SAAS,IACP,kBAAMiB,OAAOC,aAAaC,QAAQ,QAASC,KAAKC,UAAUzD,EAAK0D,MAAM7B,UAflEG,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAA2B,GAAA3B,EAAA,SAiBP4B,MAAK5B,EAAA2B,IACL3D,EAAKmC,SAAS,CAACC,SAAS,IAlBjB,yBAAAJ,EAAA6B,SAAAjC,EAAA,kBATO5B,EA+BlB8D,WAAa,SAACxD,EAAIyD,GAChB/D,EAAKmC,SAAS,SAAAe,GAAY,MAAK,CAC7BrB,MAAOqB,EAAarB,MAAMmC,IAAK,SAAAjB,GAAI,OAAIA,EAAKzC,KAAOA,EAAZa,OAAA8C,EAAA,EAAA9C,CAAA,GAAqB4B,EAArB,CAA4B7C,MAAO6C,EAAK7C,MAAQ6D,IAAShB,MAC9F,kBAAMM,OAAOC,aAAaC,QAAQ,QAASC,KAAKC,UAAUzD,EAAK0D,MAAM7B,WAhCzE7B,EAAK0D,MAAQ,CACX7B,MAAO2B,KAAKU,MAAMb,OAAOC,aAAaa,QAAQ,WAAa,GAC3D/B,SAAS,GAEXpC,EAAK4C,UAAY,IAAIwB,IAAIpE,EAAK0D,MAAM7B,MAAMmC,IAAI,SAAAjB,GAAI,OAAIA,EAAK/B,QAN3ChB,2LAsCe,IAA5Ba,KAAK6C,MAAM7B,MAAMQ,QAAcxB,KAAKW,8IAGhC,IAAA6C,EAAAxD,KACP,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAiBH,EAAAC,EAAAC,cAAA,mBAA/B,UACFF,EAAAC,EAAAC,cAAA,OAAK4D,IAAI,6FAA6FC,IAAI,eAC1G/D,EAAAC,EAAAC,cAAA,UAAQC,UAAU,mBAAmBC,QAASC,KAAKW,UAAnD,gBAEEhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACdE,KAAK6C,MAAMtB,QACR5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,eAEFE,KAAK6C,MAAM7B,MAAM2C,KAAK,SAAC/D,EAAEgE,GAAH,OAASA,EAAEvE,MAAQO,EAAEP,QAAO8D,IAAI,SAAAjB,GAAI,OACxDvC,EAAAC,EAAAC,cAACgE,EAAD,CACEC,IAAO5B,EAAKzC,GACZA,GAAMyC,EAAKzC,GACXU,KAAQ+B,EAAK/B,KACbd,MAAS6C,EAAK7C,MACdG,KAAQgE,EAAKP,wBAnES7C,aAAjBC,EAEZ0D,aAAe,CACpBtC,iBAAkB,ICGPuC,MARf,WACE,OACErE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACoE,EAAD,QCKcC,QACW,cAA7B1B,OAAO2B,SAASC,UAEe,UAA7B5B,OAAO2B,SAASC,UAEhB5B,OAAO2B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5E,EAAAC,EAAAC,cAAC2E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bb355aa7.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Joke.css'\r\n\r\nexport default class Joke extends Component {\r\n\r\n\tgetColor = () => {\r\n    if (this.props.votes >= 15) {\r\n      return \"#4CAF50\";\r\n    } else if (this.props.votes >= 12) {\r\n      return \"#8BC34A\";\r\n    } else if (this.props.votes >= 9) {\r\n      return \"#CDDC39\";\r\n    } else if (this.props.votes >= 6) {\r\n      return \"#FFEB3B\";\r\n    } else if (this.props.votes >= 3) {\r\n      return \"#FFC107\";\r\n    } else if (this.props.votes >= 0) {\r\n      return \"#FF9800\";\r\n    } else {\r\n      return \"#f44336\";\r\n    }\r\n\t}\r\n\t\r\n  getEmoji = () => {\r\n    if (this.props.votes >= 15) {\r\n      return \"em em-rolling_on_the_floor_laughing\";\r\n    } else if (this.props.votes >= 12) {\r\n      return \"em em-laughing\";\r\n    } else if (this.props.votes >= 9) {\r\n      return \"em em-smiley\";\r\n    } else if (this.props.votes >= 6) {\r\n      return \"em em-slightly_smiling_face\";\r\n    } else if (this.props.votes >= 3) {\r\n      return \"em em-neutral_face\";\r\n    } else if (this.props.votes >= 0) {\r\n      return \"em em-confused\";\r\n    } else {\r\n      return \"em em-angry\";\r\n    }\r\n  }\r\n\r\n\thandleUpVote = () => {\r\n\t\tthis.props.vote(this.props.id, 1);\r\n\t}\r\n\r\n\thandleDownVote = () => {\r\n\t\tthis.props.vote(this.props.id, -1);\r\n\t}\r\n    \r\n  render() {\r\n    return (\r\n      <div className='Joke'>\r\n        <div className='Joke-buttons'>\r\n\t\t\t\t\t<i className='fas fa-arrow-up' onClick={this.handleUpVote}></i>\r\n\t\t\t\t\t<span className='Joke-votes' style={{borderColor: this.getColor()}}>{this.props.votes}</span>\r\n\t\t\t\t\t<i className='fas fa-arrow-down' onClick={this.handleDownVote}></i>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='Joke-text'>{this.props.text}</div>\r\n\t\t\t\t<div className='Joke-emoji'>\r\n\t\t\t\t<i className={this.getEmoji()}></i>\r\n\t\t\t\t</div>\r\n      </div>\r\n    )\r\n\t}\r\n\t\r\n}\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport uuid from 'uuid'\r\nimport './JokeList.css';\r\nimport Joke from './Joke';\r\n\r\nexport default class JokeList extends Component {\r\n\r\n  static defaultProps = {\r\n    defaultNoOfJokes: 10\r\n  }\r\n  \r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      jokes: JSON.parse(window.localStorage.getItem('jokes')) || [],\r\n      loading: false\r\n    }\r\n    this.seenJokes = new Set(this.state.jokes.map(joke => joke.text));\r\n  }\r\n\r\n  getJokes = async () =>{\r\n    this.setState({loading: true});\r\n    try{\r\n      let jokes = [];\r\n      while (jokes.length < this.props.defaultNoOfJokes){\r\n        let jokeResponse = await axios.get('https://icanhazdadjoke.com/', {headers: {Accept: 'application/json'}});\r\n        if(!this.seenJokes.has(jokeResponse.data.joke))\r\n          jokes.push({text: jokeResponse.data.joke, votes: 0, id: uuid()});\r\n      }\r\n      this.setState(currentState => ({\r\n        jokes: [\r\n          ...currentState.jokes,\r\n          ...jokes\r\n        ],\r\n        loading: false\r\n      }), () => window.localStorage.setItem('jokes', JSON.stringify(this.state.jokes)))\r\n    } catch(err){\r\n      alert(err);\r\n      this.setState({loading: false});\r\n    }\r\n  }\r\n\r\n  handleVote = (id, delta) =>{\r\n    this.setState(currentState => ({\r\n      jokes: currentState.jokes.map( joke => joke.id === id ? {...joke , votes: joke.votes + delta} : joke)\r\n    }), () => window.localStorage.setItem('jokes', JSON.stringify(this.state.jokes)))\r\n  }\r\n\r\n  async componentDidMount(){\r\n    if(this.state.jokes.length === 0) this.getJokes();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='JokeList'>\r\n  \t\t\t<div className='JokeList-sidebar'>\r\n      \t\t<h1 className='JokeList-title'><span>Dad</span> Jokes</h1>\r\n\t\t\t\t  <img src='https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg' alt='ROFL_Emoji'/>\r\n\t\t\t\t  <button className='JokeList-getmore' onClick={this.getJokes}>Fetch Jokes</button>\r\n\t\t\t  </div>\r\n        <div className='JokeList-jokes'>\r\n        {this.state.loading \r\n          ? <div className='JokeList-spinner'>\r\n              <i className='far fa-laugh fa-spin'></i>\r\n              <h1 className='JokeList-loading-title'>Loading...</h1>\r\n            </div>\r\n          : this.state.jokes.sort((a,b) => b.votes - a.votes).map(joke => \r\n              <Joke \r\n                key = {joke.id} \r\n                id = {joke.id}\r\n                text = {joke.text} \r\n                votes = {joke.votes}\r\n                vote = {this.handleVote}\r\n              />)\r\n          }\r\n\t\t\t </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport JokeList from './JokeList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <JokeList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}